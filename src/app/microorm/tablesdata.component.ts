// src/app/microorm/tablesdata.component.ts
import { Component, Input, Signal, effect, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Observable, firstValueFrom } from 'rxjs';
import { PaginatedResponse } from './tables.component'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PaginatedResponse

@Component({
  selector: 'app-tablesdata',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <section *ngIf="selectedEntity()">
      <h3>{{ selectedEntity() }}</h3>

      <div *ngIf="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      <div *ngIf="error">{{ error }}</div>

      <div class="toolbar">
        <button (click)="openSidebar()">‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
        <button (click)="saveChanges()">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>

        <div class="pagination-controls">
          <button (click)="goToPage(currentPage() - 1)" [disabled]="currentPage() === 1">‚Üê</button>
          <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {{ currentPage() }} –∏–∑ {{ totalPages() }} ({{ totalItems() }} —Å—Ç—Ä–æ–∫)</span>
          <button (click)="goToPage(currentPage() + 1)" [disabled]="currentPage() === totalPages()">‚Üí</button>
        </div>
      </div>

      <table *ngIf="!loading && data.length > 0">
        <thead>
        <tr>
          <th *ngFor="let col of getColumns()">{{ col }}</th>
          <th>–£–¥–∞–ª–∏—Ç—å</th>
        </tr>
        </thead>
        <tbody>
        <tr *ngFor="let row of data">
          <td *ngFor="let col of getColumns()">
            <input [(ngModel)]="row[col]" name="{{ row[getPrimaryKey() || 'new'] }}-{{ col }}" />
          </td>
          <td>
            <button (click)="deleteRow(row)">üóë</button>
          </td>
        </tr>
        </tbody>
      </table>

      <p *ngIf="!loading && data.length === 0 && !error">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ</p>
    </section>

    <div class="sidebar" *ngIf="showSidebar">
      <h4>‚ûï –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞</h4>

      <div *ngFor="let field of fieldMetadata">
        <label>{{ field.field }}</label>

        <input
          *ngIf="field.type !== 'boolean'"
          [(ngModel)]="newRow[field.field]"
          [name]="'new-' + field.field"
          [readonly]="field.primaryKey" /><input
        *ngIf="field.type === 'boolean'"
        type="checkbox"
        [(ngModel)]="newRow[field.field]"
        [name]="'new-' + field.field"
      />
      </div>

      <div class="sidebar-buttons">
        <button (click)="confirmAddRow()">‚úÖ –î–æ–±–∞–≤–∏—Ç—å</button>
        <button (click)="showSidebar = false">‚ùå –û—Ç–º–µ–Ω–∞</button>
      </div>
    </div>
  `,
  styles: [`
    section {
      padding: 1rem;
    }

    h3 {
      margin-bottom: 1rem;
    }

    .toolbar {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
      align-items: center;
    }

    .pagination-controls {
      margin-left: auto;
      display: flex;
      gap: 0.5rem;
      align-items: center;
      white-space: nowrap;
    }

    .pagination-controls button {
      padding: 0.5rem 1rem;
      cursor: pointer;
    }
    .pagination-controls button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      font-size: 0.9rem;
    }

    th, td {
      border: 1px solid #ccc;
      padding: 0.5rem;
      vertical-align: top;
    }

    input {
      width: 100%;
      padding: 0.3rem;
      box-sizing: border-box;
    }

    .sidebar {
      position: fixed;
      top: 0;
      right: 0;
      width: 300px;
      height: 100vh;
      background: #fff;
      border-left: 1px solid #ccc;
      padding: 1rem;
      box-shadow: -2px 0 5px rgba(0,0,0,0.1);
      z-index: 1000;
      overflow-y: auto;
    }

    .sidebar-buttons {
      margin-top: 1rem;
      display: flex;
      gap: 1rem;
    }
  `]
})
export class TablesdataComponent {
  @Input({ required: true }) selectedEntity!: Signal<string | null>;
  @Input({ required: true }) getEntityData!: (tableName: string, limit: number, offset: number) => Observable<PaginatedResponse<any>>;
  @Input({ required: true }) createEntityRow!: (tableName: string, row: any) => Observable<any>;
  @Input({ required: true }) updateEntityRow!: (tableName: string, id: string | number, row: any) => Observable<any>; // –ò–∑–º–µ–Ω–∏–ª —Ç–∏–ø ID
  @Input({ required: true }) deleteEntityRow!: (tableName: string, id: string | number) => Observable<any>; // –ò–∑–º–µ–Ω–∏–ª —Ç–∏–ø ID
  @Input({ required: true }) getEntityMetadata!: (tableName: string) => Observable<any[]>;
  @Input({ required: true }) currentPage!: Signal<number>;
  @Input({ required: true }) itemsPerPage!: Signal<number>;
  @Input({ required: true }) totalItems!: Signal<number>;
  @Output() pageChange = new EventEmitter<number>();

  fieldMetadata: any[] = [];
  data: any[] = [];
  originalData: any[] = [];

  loading = false;
  error: string | null = null;

  showSidebar = false;
  newRow: any = {};

  constructor() {
    effect(() => {
      const table = this.selectedEntity();
      const page = this.currentPage();
      const limit = this.itemsPerPage();

      if (!table) return;

      // –ü—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      this.loadData(table, limit, (page - 1) * limit);
    });
  }

  totalPages(): number {
    if (this.totalItems() === 0) return 0; // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    return Math.ceil(this.totalItems() / this.itemsPerPage());
  }

  getPrimaryKey(): string | null {
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    const pkField = this.fieldMetadata.find(f => f.primaryKey);
    return pkField ? pkField.field : null;
  }

  private loadData(table: string, limit: number, offset: number) {
    this.loading = true;
    this.error = null;

    this.getEntityData(table, limit, offset).subscribe({
      next: (response) => {
        this.data = structuredClone(response.data);
        this.originalData = structuredClone(response.data);
        // totalItems –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º TablesComponent —á–µ—Ä–µ–∑ tap operator
        this.loading = false;
      },
      error: (err) => {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã '${table}':`, err);
        this.error = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã '${table}'. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.`;
        this.loading = false;
      }
    });
  }

  getColumns(): string[] {
    if (this.data.length === 0) return [];
    return Object.keys(this.data[0]);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ ID
  generateUUID(): string {
    return crypto.randomUUID();
  }

  openSidebar() {
    const table = this.selectedEntity();
    if (!table) return;

    this.getEntityMetadata(table).subscribe({
      next: (metadata) => {
        this.fieldMetadata = metadata;

        const row: any = {};
        for (const field of metadata) {
          if (field.primaryKey) {
            // –ï—Å–ª–∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –∏ –µ–≥–æ —Ç–∏–ø UUID, —Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID
            if (field.primaryKeyType === 'UUID') {
              row[field.field] = this.generateUUID();
            } else {
              // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π (INTEGER, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–µ),
              // –æ—Å—Ç–∞–≤–ª—è–µ–º null. Sequelize —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ.
              row[field.field] = null;
            }
          } else {
            // –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è –∏ –∏–º–µ–Ω–∏
            switch (field.type) {
              case 'string':
                if (field.field === 'resultBody') {
                  row[field.field] = field.allowNull ? null : `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏...`;
                } else {
                  row[field.field] = field.allowNull ? null : `–ù–æ–≤—ã–π ${field.field} (—Ç–µ–∫—Å—Ç)`;
                }
                break;
              case 'number':
                if (field.field === 'durationS') {
                  row[field.field] = field.allowNull ? null : 0;
                } else {
                  row[field.field] = field.allowNull ? null : 0;
                }
                break;
              case 'boolean':
                if (field.field === 'isActive') {
                  row[field.field] = false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é false
                } else {
                  row[field.field] = false; // –û–±—â–µ–µ –¥–ª—è –≤—Å–µ—Ö boolean
                }
                break;
              case 'date':
                if (field.field === 'dateProcessingFinish') {
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                  row[field.field] = field.allowNull ? null : new Date().toISOString().slice(0, 10);
                } else {
                  row[field.field] = field.allowNull ? null : new Date().toISOString().slice(0, 10);
                }
                break;
              case 'object': // –ï—Å–ª–∏ errorFileContent –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ JSON-–æ–±—ä–µ–∫—Ç
                if (field.field === 'errorFileContent') {
                  row[field.field] = field.allowNull ? null : {}; // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
                } else {
                  row[field.field] = field.allowNull ? null : {};
                }
                break;
              default:
                row[field.field] = field.allowNull ? null : ''; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
          }
        }

        this.newRow = row;
        this.showSidebar = true;
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', err);
        this.error = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.';
      }
    });
  }

  confirmAddRow() {
    const table = this.selectedEntity();
    if (!table) {
      console.warn('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.');
      return;
    }

    console.log('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:', this.newRow); // –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

    this.createEntityRow(table, this.newRow).subscribe({
      next: (res) => {
        console.log('–°—Ç—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', res); // –ß—Ç–æ –≤–µ—Ä–Ω—É–ª –±—ç–∫–µ–Ω–¥
        this.showSidebar = false;
        this.newRow = {}; // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ID
        this.pageChange.emit(this.currentPage());
        this.error = null; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏:', err);
        this.error = `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏: ${err.message || err.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
        // –î–æ–±–∞–≤—å—Ç–µ alert –∏–ª–∏ Toast, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –æ—à–∏–±–∫—É
        alert(this.error);
      }
    });
  }

  async saveChanges() {
    const table = this.selectedEntity();
    if (!table) return;

    const pk = this.getPrimaryKey();
    if (!pk) {
      console.warn('‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.error = '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      return;
    }

    const changedRows = this.data.filter(row => {
      // –ò—â–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ PK. –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, —ç—Ç–æ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ confirmAddRow, –∞ –Ω–µ saveChanges)
      const original = this.originalData.find(r => r[pk] === row[pk]);
      return original && JSON.stringify(original) !== JSON.stringify(row);
    });

    try {
      if (changedRows.length === 0) {
        console.log('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
        return;
      }

      this.loading = true;
      for (const row of changedRows) {
        await firstValueFrom(this.updateEntityRow(table, row[pk], row));
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å ${pk}=${row[pk]}`);
      }

      // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å originalData
      this.pageChange.emit(this.currentPage());
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${changedRows.length} —Å—Ç—Ä–æ–∫(–∏)`);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err);
      this.error = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.';
    } finally {
      this.loading = false;
    }
  }

  deleteRow(row: any) {
    const table = this.selectedEntity();
    if (!table) return;

    const pk = this.getPrimaryKey();
    if (!pk) {
      console.warn('‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
      this.error = '–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.';
      return;
    }

    if (!row[pk]) {
      // –ï—Å–ª–∏ —É —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞, –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î
      this.data = this.data.filter(r => r !== row);
      console.log('–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }

    this.deleteEntityRow(table, row[pk]).subscribe({
      next: () => {
        // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º totalItems –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.pageChange.emit(this.currentPage());
        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å ${pk}=${row[pk]}`);
      },
      error: (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', err);
        this.error = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏.';
      }
    });
  }

  goToPage(page: number) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (page >= 1 && page <= this.totalPages()) {
      this.pageChange.emit(page); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    } else {
      console.warn(`–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page}. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${this.totalPages()}`);
    }
  }
}
